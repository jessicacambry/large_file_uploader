

-#%form.upload-form
-#  %input#files{multiple: "multiple", name: "files[]", type: "file"}
-#  %output#list

%link{href: "/css/style.css", rel: "stylesheet"}
%link{href: "/css/jquery.fileupload.css", rel: "stylesheet"}
%script{src: "/js/underscore.js"}
%script{src:"/js/hmac-sha1.js"}
%script{src: "/js/enc-base64-min.js"}

.container.mtl
  %h4.mbm
    %p Please upload your files here.
    %p A confirmation email will be sent to you and to #{@sender_email} when the upload has completed.
    %p Your files will be retained for #{@keep_days} days.
    %p File Size may look wrong due to KB to MB conversion
  %form.upload-form
    .row.mbm
      %span.btn.btn-success.fileinput-button
        %i.glyphicon.glyphicon-plus
        %span Select files...
        %input#fileupload{multiple: "multiple", name: "files[]", type: "file"}
        %input{type: :hidden, name: :multipartMinSize, value: (5 * 1024 * 1024)}
        %input{type: :hidden, name: :maxFileSize, value: @max_file_size}
        %input{type: :hidden, name: :bucket, value: $BUCKET}
        %input{type: :hidden, name: :accessKey, value: $AWS_ACCESS_KEY_ID}
        %input{type: :hidden, name: :secretKey, value: $AWS_SECRET}
        %input{type: :hidden, name: :awsPolicy, value: aws_policy}
        %input{type: :hidden, name: :awsSignature, value: aws_signature}
        %input{type: :hidden, name: :acl, value: $ACL}
        %input{type: :hidden, name: :date, value: date}
      %button.btn.btn-primary.start{type: "submit"}
        %i.glyphicon.glyphicon-upload
        %span Start upload
    .row.mbm.files
      %table.upload-table.full-width
        %thead
          %tr
            %th File Name
            %th File Size
            %th Progress
        %tbody
    #files.files


// will only work with auth v2
// add <ExposeHeader>ETag</ExposeHeader> to CORS

:javascript
  $( document ).ready(function() {

    var multipartMinSize = 5 * 1024 * 1024;
    var maxFileSize      = "#{@max_file_size}";
    var bucket           = "#{$BUCKET}";
    var accessKey        = "#{$AWS_ACCESS_KEY_ID}";
    var secretKey        = "#{$AWS_SECRET}";
    var awsPolicy        = "#{aws_policy}";
    var awsSignature     = "#{aws_signature}";
    var acl              = "#{$ACL}";
    var date             = "#{date}";

    function Uploader(){
      this.uploadForm = new UploaderForm('.upload-form');
      this.$uploadTable = $('.upload-table');
      this.fileQueue = [];

      this.getFile = function(e){
        e.preventDefault();
        var fileList = e.target.files;

        for (var i = 0; i < fileList.length; i++) {
          var file = new File(fileList[i]);
          this.fileQueue.push(file);
          this.$uploadTable.children('tbody').append(
            '<tr>' +
            ' <td>'+file.name+'</td>' +
            '  <td>'+(file.size/1024/1024).toFixed(2)+'MB</td>' +
            '  <td>' +
            '    <div class="progress progress-striped active mts">' +
            '      <div class="progress-bar" "aria-valuemax"="100" "aria-valuemin"= 0" "aria-valuenow"="45" style="width: 45%">' +
            '        <span class="sr-only"></span>' +
            '        45%</div>' +
            '    </div>' +
            '  </td>' +
            '</tr>'
          )
        }
      };

      this.startUploads = function(e){
        e.preventDefault();
        for (var i = 0; i < this.fileQueue.length; i++) {
           //new Upload();
           this.fileQueue[i].sendToAmazon();
        }
      }
      _.bindAll(this, "getFile", "startUploads");

      this.uploadForm.$fileInput.change(this.getFile);
      this.uploadForm.$el.submit(this.startUploads)
    }

    //function Upload(el, file, form){
    //  this.$el = $(el);
    //  this.file = file;
    //  this.form = form;
    //}

    function UploaderForm(el){
      this.$el = $(el);
      this.$fileInput = $('#fileupload');
      //this.multipartMinSize = function(){return $("name='multipartMinSize'").val();}
      //this.maxFileSize      = function(){return $("name='maxFileSize'").val();}
      //this.bucket           = function(){return $("name='bucket'").val();}
      //this.accessKey        = function(){return $("name='accessKey'").val();}
      //this.secretKey        = function(){return $("name='secretKey'").val();}
      //this.awsPolicy        = function(){return $("name='awsPolicy'").val();}
      //this.awsSignature     = function(){return $("name='awsSignature'").val();}
      //this.acl              = function(){return $("name='acl'").val();}
      //this.date             = function(){return $("name='date'").val();}
    }

    function File(file){
      this.fileObj = file;
      this.name = this.fileObj.name;
      this.size = this.fileObj.size;
      this.totalChunks = function(){
        return Math.ceil(this.size / multipartMinSize)
      }
      this.canUseMultipart = function(){
        return this.size > multipartMinSize;
      };
      this.date = new Date().toUTCString() //remember to change this date
      //this.uploadId = ''

      this.sendFullFileToAmazon = function(){
        var fd = new FormData();
        fd.append('key',            this.name);
        fd.append('AWSAccessKeyId', accessKey);
        fd.append('acl',            acl);
        fd.append('policy',         awsPolicy);
        fd.append('signature',      awsSignature);
        fd.append('file',           this.fileObj);

        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/',
          type: 'post',
          dataType: 'xml',
          data: fd,
          processData: false,
          contentType: false,
          success: function(data, textStatus, jqXHR ) {
          }
        })
      };

      this.sendToAmazon = function(){
        if(this.canUseMultipart()){
          this.initiateMultipartUpload();
        }else{
          this.sendFullFileToAmazon;
        };
      };

      this.initiateMultipartUpload = function(){
        var stringToSign = 'POST\n\n\n\nx-amz-date:'+date+'\n/'+bucket+'/'+this.name+'?uploads';
        var auth = encryptAuth(stringToSign);

        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/'+this.name+'?uploads',
          type: 'post',
          dataType: 'xml',
          beforeSend: function (xhr) {
            xhr.setRequestHeader("x-amz-date", date)
            xhr.setRequestHeader("Authorization", auth);
          },
          context: this,
          success: function(data, textStatus, jqXHR ) {
            this.uploadId = data.getElementsByTagName("UploadId")[0].innerHTML; //this.uploadId
            this.uploadParts();
          }
        })
      }

      this.multipartAbort = function(){
        var stringToSign = 'DELETE\n\n\n\nx-amz-date:'+date+'\n/'+bucket+'/'+this.name+'?uploadId='+this.uploadId;
        var auth = encryptAuth(stringToSign)
        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/'+this.name+'?uploadId='+this.uploadId,
          type: 'DELETE',
          dataType: 'xml',
          beforeSend: function (xhr) {
            xhr.setRequestHeader("x-amz-date", date)
            xhr.setRequestHeader("Authorization", auth);
          },
          success: function(data, textStatus, jqXHR ) {
          }
        })
      }

      this.uploadParts = function(){
        for(var partNumber=1; partNumber < this.totalChunks(); partNumber++){
          var startByte = (multipartMinSize * partNumber-1)
          var endByte = multipartMinSize * (partNumber)
          var blob = this.fileObj.slice(startByte, endByte)  //check if missing a byte
          this.sendPartToAmazon(blob, partNumber);
        }
      }

      this.sendPartToAmazon = function(data, partNumber){
        var stringToSign = 'PUT\n\ntext/plain;charset=UTF-8\n\nx-amz-date:'+date+'\n/'+bucket+'/'+this.name+'?partNumber='+partNumber+'&uploadId='+this.uploadId;  //Add CONTENT MD5
        var auth = encryptAuth(stringToSign)

        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/'+this.name+'?partNumber='+partNumber+'&uploadId='+this.uploadId,
          type: 'PUT',
          dataType: 'xml',
          data: data,
          beforeSend: function (xhr) {
            xhr.setRequestHeader("x-amz-date", date);
            xhr.setRequestHeader("Authorization", auth);
          },
          contentType: false,
          context: this,
          success: function(data, textStatus, jqXHR ) {
            this.partNumber = 1
            this.ETag = jqXHR.getResponseHeader('ETag').replace(/"/g, '');
            this.completeMultipart(this.partNumber, this.ETag);
          },
          error: function(data, textStatus, jqXHR ) {
            this.multipartAbort();
          }
        })
      }


      //TODO change multipart upload to work
      this.completeMultipart = function(partNumber, ETag){
        var stringToSign = 'POST\n\ntext/plain;charset=UTF-8\n\nx-amz-date:'+date+'\n/'+bucket+'/'+this.name+'?uploadId='+this.uploadId;  //Add CONTENT MD5
        var auth = encryptAuth(stringToSign)

        var data =  '<CompleteMultipartUpload>' +
                    '  <Part>' +
                    '    <PartNumber>'+partNumber+'</PartNumber>' +
                    '    <ETag>'+ETag+'</ETag>' +
                    '  </Part>' +
                    '</CompleteMultipartUpload>'
        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/'+this.name+'?uploadId='+this.uploadId,
          type: 'POST',
          dataType: 'xml',
          data: data,
          beforeSend: function (xhr) {
            xhr.setRequestHeader("x-amz-date", date);
            xhr.setRequestHeader("Authorization", auth);
          },
          contentType: false,
          context: this,
          success: function(data, textStatus, jqXHR ) {
          },
          error: function(data, textStatus, jqXHR ) {
            this.multipartAbort();
          }
        })
      }


      function encryptAuth(stringToSign){
        var crypto = CryptoJS.HmacSHA1(stringToSign, secretKey).toString(CryptoJS.enc.Base64);
        var auth = 'AWS'+' '+accessKey+':'+crypto
        return auth
      }

      _.bindAll(this, "sendToAmazon", "canUseMultipart");
      _.bindAll(this, "sendFullFileToAmazon", "initiateMultipartUpload", "multipartAbort");
      _.bindAll(this, "uploadParts", "sendPartToAmazon", "completeMultipart");
    }

    new Uploader();
  });