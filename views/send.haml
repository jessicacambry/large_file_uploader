Please upload your files here.
A confirmation email will be sent to you and to #{@sender_email} when the upload has completed.
Your files will be retained for #{@keep_days} days.

%form.upload-form
  %input#files{multiple: "multiple", name: "files[]", type: "file"}
  %output#list
%script{src: "/js/underscore.js"}
%script{src:"/js/hmac-sha1.js"}
%script{src: "/js/enc-base64-min.js"}

-#%form(action="https://#{ENV['S3_BUCKET']}.s3.amazonaws.com" method="post" enctype="multipart/form-data" class='direct-upload')
-#  %input{type: :hidden, name: :key}
-#  %input{type: :hidden, name: "AWSAccessKeyId", value: ENV['AWS_ACCESS_KEY_ID']}
-#  %input{type: :hidden, name: :acl, value: 'public-read'}
-#  %input{type: :hidden, name: :policy}
-#  %input{type: :hidden, name: :signature}
-#  %input{type: :hidden, name: :success_action_status, value: "201"}

:javascript
  $( document ).ready(function() {

    var multipartMinSize = 5 * 1024 * 1024;
    var maxFileSize      = "#{@max_file_size}";
    var bucket           = "#{$BUCKET}";
    var accessKey        = "#{$AWS_ACCESS_KEY_ID}";
    var secretKey        = "#{$AWS_SECRET}";
    var awsPolicy        = "#{aws_policy}";
    var awsSignature     = "#{aws_signature}";
    var acl              = "#{$ACL}";
    var date             = "#{date}";

    function Uploader(){
      this.uploadForm = new UploaderForm('.upload-form');
      this.fileQueue = [];

      this.getFiles = function(e){
        e.preventDefault();
        var fileList = e.target.files;  //file list object

        for (var i = 0; i < fileList.length; i++) {
          var file = new File(fileList[i]);
          this.fileQueue.push(file);
          file.sendToAmazon();
        }
      };

      _.bindAll(this, "getFiles");

      this.uploadForm.$fileInput.change(this.getFiles);
    }

    function UploaderForm(el){
      this.$el = $(el);
      this.$fileInput = $('#files');
    }

    function File(file){
      this.htmlFile = file;
      this.name = this.htmlFile.name;
      this.size = this.htmlFile.size;
      this.totalChunks = function(){
        return Math.ceil(this.size / multipartMinSize)
      }
      this.canUseMultipart = function(){
        return this.size > multipartMinSize;
      };
      this.date = new Date().toUTCString()
      this.uploadId = ''

      this.setFormData = function(e) {
        var fd = new FormData();
        fd.append('key',            this.name);
        fd.append('AWSAccessKeyId', accessKey);
        fd.append('acl',            acl);
        fd.append('policy',         awsPolicy);
        fd.append('signature',      awsSignature);
        fd.append('file',           e.target.result);

        this.sendFullFileToAmazon(fd);
      }

      this.sendFullFileToAmazon = function(formData){
        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/',
          type: 'post',
          dataType: 'xml',
          data: formData,
          processData: false,
          contentType: false,
          success: function(data, textStatus, jqXHR ) {
          }
        })
      };

      this.readEntireFile = function(file, onLoadCallback){
        var reader = new FileReader();
        reader.onload = onLoadCallback;
        reader.readAsBinaryString(file);
      }

      this.readBlobs = function(file, currentChunk, onLoadCallback){
        var startByte = (multipartMinSize * currentChunk)
        var endByte = multipartMinSize * (currentChunk +1)
        var blob = file.slice(1, 2)
        var reader = new FileReader();
        reader.onload = onLoadCallback;
        reader.readAsBinaryString(blob);
      }

      this.sendToAmazon = function(){
        if(this.canUseMultipart()){
          this.initiateMultipartUpload()
        }else{
          this.readEntireFile(this.htmlFile, this.setFormData)
        };
      };

      this.initiateMultipartUpload = function(){
        var auth = this.multipartAuth();
        var uploadId = this.uploadId;
        $.ajax({
          url : 'https://' + bucket + '.s3.amazonaws.com/'+this.name+'?uploads ',
          type: 'post',
          dataType: 'xml',
          beforeSend: function (xhr) {
            xhr.setRequestHeader("x-amz-date", date)
            xhr.setRequestHeader("Authorization", auth);
          },
          success: function(data, textStatus, jqXHR ) {
            uploadId = data.getElementsByTagName("UploadId")[0].innerHTML;
          }
        })
      }

      this.multipartAuth = function(){
        var stringToSign = 'POST' + "\n" +
          "\n" +
          "\n" +
          "\n" +
          'x-amz-date:'+date+"\n" +
          '/'+bucket+'/'+this.name+'?uploads';

        var crypto = CryptoJS.HmacSHA1(stringToSign, secretKey).toString(CryptoJS.enc.Base64);
        var auth = 'AWS'+' '+accessKey+':'+crypto
        return auth
      }

      _.bindAll(this, "sendToAmazon", "readEntireFile", "canUseMultipart", "setFormData");
      _.bindAll(this, "sendFullFileToAmazon", "readBlobs", "initiateMultipartUpload", "multipartAuth");
    }

    new Uploader();
  });